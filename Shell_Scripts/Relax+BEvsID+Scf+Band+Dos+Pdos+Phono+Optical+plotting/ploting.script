#!/bin/bash
#======================SWITCHES=====================================================
CRE_BAND_PLT=1						#Use 1 to plot, 0 for not to plot
CRE_DOS_PLT=0						#Use 1 to plot, 0 for not to plot
CRE_PDOS_PLT=0						#Use 1 to plot, 0 for not to plot
CRE_PNG=1							#Use 1 to plot, 0 for not to plot
#======================INPUT SIDE===================================================
MANUAL_PREFIX=0
PREFIX="InN+C_III_"					#Manual input of PREFIX when MANUAL_PREFIX=1

#======================BAND=========================================================
Y_RANGE_BND=(-4 4)					#For full range keep it empty
KP_NAME=(M "{/Symbol G}" K M)    	#Use "{/Symbol G}" for gamma; if AUTO_KP_FROM_BAND_NSCF_INPUT=1, this will be deactive

AUTO_KP_FROM_BAND_NSCF_INPUT=1		#For manual input of make 0 and provide with KP_NAME
DRAW_VERTICAL_LINES=1				#Use 1 to plot, 0 for not to plot

BND_LEGEND="Struct I"
Y_LBL_BND="Energy (eV)"
X_LBL_BND="K Points"

#TEXT_BND="Band Gap=0.3817eV (G/K)"
TEXT_BND=""							#For no textbox in the graph just uncomment this. TIME SAVER
L_POS=(1.0 0.5)
FONT_SIZ=10

#======================DOS==========================================================
Y_RANGE_DOS=(-4 4)					#For full range keep it empty
X_RANGE_DOS=(0 25)					#For full range keep it empty

DOS_LEGEND="Struct I"
Y_LBL_DOS="Energy (eV)"
X_LBL_DOS="States (States/eV)"

#======================PDOS=========================================================
Y_RANGE_PDOS=( )					#For full range keep it empty
X_RANGE_PDOS=(-13 5)				#For full range keep it empty

PDOS_LEGEND="Struct I"
Y_LBL_PDOS="States (States/eV)"
X_LBL_PDOS="Energy (eV)"

#Keep the order same in these catagories
NAME_OF_ATOMS=(In N Si C)
NO_OF_ORBITALS=(3 2 2 2)
USE_CUSTOM=(1 0 0 0)
ORBITALS_CUS=(d s p)
COLORS=("blue" "green" "red" "purple")

#======================PROGRAM SIDE=================================================
if [[ MANUAL_PREFIX -eq 0 ]]; then
	PREFIX_TMP=($(ls | grep -w "scf.in" | tr "." "\n" | grep -v "scf" | grep -v "in"))
	PREFIX=${PREFIX_TMP[0]}
	for (( i = 1; i < ${#PREFIX_TMP[*]}; i++ )); do
		PREFIX=$PREFIX.${PREFIX_TMP[i]}
	done	
fi

#======================BAND=========================================================
if [ $CRE_BAND_PLT -eq 1 ];then
	KP_HS_POINTS=($(grep "high" $PWD/OUT/$PREFIX.band.out | awk {'print $8'}))
	F_ENG_BND=$(grep "Fermi" $PWD/OUT/$PREFIX.scf.out | awk {'print $5'})
	KP_NAME_2=($(grep -A 5 "K_POINTS" $PWD/$PREFIX.band_nscf.in | grep -v "K_P" | awk '{print $1}')) #Automation of KP
	
	for (( i = 0; i < 6; i++ )); do
		if [[ ${KP_NAME_2[i]} == "gG" ]]; then
			KP_NAME_2[i]='{/Symbol G}'
		fi
	done
	
	touch $PWD/Plot_band_$PREFIX.script
	if [[ $CRE_PNG -eq 1 ]]; then
		cat > $PWD/Plot_band_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist

reset
set term pngcairo
set output "${PREFIX}_BANDS.png"
set label '$TEXT_BND' at ${L_POS[0]},${L_POS[1]} font ',$FONT_SIZ'

EOF
	else
		cat > $PWD/Plot_band_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist

reset
set label '$TEXT_BND' at ${L_POS[0]},${L_POS[1]} font ',$FONT_SIZ'

EOF
fi

	if [[ $AUTO_KP_FROM_BAND_NSCF_INPUT == '1' ]];then 			#Automation of KP
		cat >> $PWD/Plot_band_$PREFIX.script <<EOF
set xtics ("${KP_NAME_2[1]}" ${KP_HS_POINTS[0]},"${KP_NAME_2[2]}" ${KP_HS_POINTS[1]},"${KP_NAME_2[3]}" ${KP_HS_POINTS[2]},"${KP_NAME_2[4]}" ${KP_HS_POINTS[3]})
EOF
	else
		cat >> $PWD/Plot_band_$PREFIX.script <<EOF
set xtics ("${KP_NAME[0]}" ${KP_HS_POINTS[0]},"${KP_NAME[1]}" ${KP_HS_POINTS[1]},"${KP_NAME[2]}" ${KP_HS_POINTS[2]},"${KP_NAME[3]}" ${KP_HS_POINTS[3]})
EOF
	fi

	if [ $DRAW_VERTICAL_LINES -eq 1 ];then
		cat >> $PWD/Plot_band_$PREFIX.script <<EOF
set arrow from ${KP_HS_POINTS[0]},graph(0,0) to ${KP_HS_POINTS[0]},graph(1,1) nohead
set arrow from ${KP_HS_POINTS[1]},graph(0,0) to ${KP_HS_POINTS[1]},graph(1,1) nohead
set arrow from ${KP_HS_POINTS[2]},graph(0,0) to ${KP_HS_POINTS[2]},graph(1,1) nohead

EOF
	fi
	
	cat >> $PWD/Plot_band_$PREFIX.script <<EOF
set yrange [${Y_RANGE_BND[0]} : ${Y_RANGE_BND[1]}]
set ylabel '$Y_LBL_BND'
set xlabel '$X_LBL_BND'
FE=$F_ENG_BND

plot "$PWD/OUT/$PREFIX.band.gnu" using 1:(\$2-FE) w l title "$BND_LEGEND"

EOF
	./Plot_band_$PREFIX.script
else
	echo BAND NOT ACTIVATED
fi
#=======================DOS=========================================================
if [ $CRE_DOS_PLT -eq 1 ];then
	F_ENG_DOS=$(grep "Fermi" $PWD/OUT/$PREFIX.dos | awk {'print $9'})
	
	touch $PWD/Plot_dos_$PREFIX.script
	if [[ $CRE_PNG -eq 1 ]]; then
		cat > $PWD/Plot_dos_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist
reset
set term pngcairo
set output "${PREFIX}_DOS.png"
EOF
	else
		cat > $PWD/Plot_dos_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist
reset
EOF
	fi
	
	cat > $PWD/Plot_dos_$PREFIX.script <<EOF
set yrange [${Y_RANGE_DOS[0]} : ${Y_RANGE_DOS[1]}]
set xrange [${X_RANGE_DOS[0]} : ${X_RANGE_DOS[1]}]
set ylabel '$Y_LBL_DOS'
set xlabel '$X_LBL_DOS'
FE=$F_ENG_DOS
plot "$PWD/OUT/$PREFIX.dos" using 2:(\$1-FE) w l title '$DOS_LEGEND'
EOF
	./Plot_dos_$PREFIX.script
else
	echo DOS NOT ACTIVATED
fi

#========================PDOS=======================================================
if [ $CRE_PDOS_PLT -eq 1 ];then
	F_ENG_PDOS=$(grep "Fermi" $PWD/OUT/$PREFIX.dos | awk {'print $9'})
	
	touch $PWD/Plot_pdos_$PREFIX.script
	if [[ $CRE_PNG -eq 1 ]]; then
		cat > $PWD/Plot_pdos_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist

reset
set term pngcairo
set output "${PREFIX}_PDOS.png"
EOF
	else
		cat > $PWD/Plot_pdos_$PREFIX.script <<EOF
#!/usr/bin/gnuplot -persist

reset
EOF
	fi
		cat > $PWD/Plot_pdos_$PREFIX.script <<EOF
set yrange [${Y_RANGE_PDOS[0]} : ${Y_RANGE_PDOS[1]}]
set xrange [${X_RANGE_PDOS[0]} : ${X_RANGE_PDOS[1]}]
set ylabel '$Y_LBL_PDOS'
set xlabel '$X_LBL_PDOS'
FE=$F_ENG_PDOS

plot \\
EOF
	NO_OF_ATOMS=$(grep "nat" $PWD/$PREFIX.scf.in | awk {'print $3'})
	TYPES=$(grep "ntyp" $PWD/$PREFIX.scf.in | awk {'print $3'})
	ATM=($(grep -A $(calc $NO_OF_ATOMS+1) "ATOMIC_POSITION" $PWD/$PREFIX.scf.in | awk {'print $1'}))  #ARRAY
	ORBITALS=(s p d)
	FIRST_TIME=(1 1 1 1 1 1 1 1 1 1 1)
	
	#i for var atoms number, j for actual orbital no., k for var orbital no.,
	
	for (( i = 1; i <= $NO_OF_ATOMS; i++ )); do
		for (( j = 0; j < $TYPES; j++ )); do
			if [[ ${ATM[i]} == ${NAME_OF_ATOMS[j]} ]]; then #Determining the position in NO_OF_ORBITALS var by comparing the name.
				break
			fi
		done
		
		for (( k = 0, kk= 1; k < ${NO_OF_ORBITALS[j]}; k++, kk++ )); do
			if [[ ${USE_CUSTOM[j]} -eq 1 ]]; then
				if [[ ${FIRST_TIME[j]} -eq 1 ]]; then
					FIRST_TIME[j]=0
					cat >> $PWD/Plot_pdos_$PREFIX.script <<EOF
"$PWD/OUT/$PREFIX.pdos_atm#$i(${ATM[i]})_wfc#$kk(${ORBITALS_CUS[k]})" using (\$1-FE):2 w l lc "${COLORS[j]}" title '${ATM[i]}', \\
EOF
				else
					cat >> $PWD/Plot_pdos_$PREFIX.script <<EOF
"$PWD/OUT/$PREFIX.pdos_atm#$i(${ATM[i]})_wfc#$kk(${ORBITALS_CUS[k]})" using (\$1-FE):2 w l lc "${COLORS[j]}" notitle, \\
EOF
				fi
			else
				if [[ ${FIRST_TIME[j]} -eq 1 ]]; then
					FIRST_TIME[j]=0
					cat >> $PWD/Plot_pdos_$PREFIX.script <<EOF
"$PWD/OUT/$PREFIX.pdos_atm#$i(${ATM[i]})_wfc#$kk(${ORBITALS[k]})" using (\$1-FE):2 w l lc "${COLORS[j]}" title '${ATM[i]}', \\
EOF
				else
					cat >> $PWD/Plot_pdos_$PREFIX.script <<EOF
"$PWD/OUT/$PREFIX.pdos_atm#$i(${ATM[i]})_wfc#$kk(${ORBITALS[k]})" using (\$1-FE):2 w l lc "${COLORS[j]}" notitle, \\
EOF
				fi
			fi
 		done
	done
	./Plot_pdos_$PREFIX.script
else
	echo PDOS NOT ACTIVATED
fi



#===================================THE_END=========================================